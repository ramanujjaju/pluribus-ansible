---
# This task is to accept eula.
# It uses pn_ztp_eula_accept.py module from library/modules directory.
# Accpts eula of each switch.
- name: Zero Touch Provisioning - Eula accept
  hosts: localhost
  tags: eula-accept

  tasks:
    - name: Auto accept EULA
      pn_ztp_eula_accept:
        pn_spine_list: "{{ groups['spine'] | default([]) }}"                                                          # List of spine switches
        pn_leaf_list: "{{ groups['leaf'] | default([])}}"                                                             # List of leaf switches
        pn_leaf_ips: "{{ groups['leaf'] | default('') | map('extract', hostvars, ['ansible_host']) | join(',') }}"    # IPs of leaf switches separated by comma
        pn_spine_ips: "{{ groups['spine'] | default('') | map('extract', hostvars, ['ansible_host']) | join(',') }}"  # IPs of spine switches separated by comma




# This task is to configure initial ZTP setup on all switches.
# It uses pn_ztp_initial_setup.py module from library/ directory.
# If the tasks fails then it will retry as specified by retries count.
# sets up initial fabric setup of the switch.
- name: Zero Touch Provisioning - Initial setup
  hosts: spine, leaf
  tags: fabric-setup
  serial: 1

  tasks:
    - name: Disable STP, enable ports and create/join fabric
      pn_ztp_initial_setup:
        pn_fabric_name: "tmtrflaan-fabric"             # Name of the fabric to create/join.
        pn_current_switch: "{{ inventory_hostname }}"  # Name of the switch on which this task is currently getting executed.
        pn_spine_list: "{{ groups['spine'] }}"         # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"           # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_toggle_port_speed: True                     # Flag to indicate if 40g/100g ports should be converted to 10g/25g ports or not.
        pn_inband_ipv4: '159.67.205.132/27'             # Inband ips to be assigned to switches starting with this value. Default: 192.168.0.1/24.
        pn_fabric_network: 'mgmt'                      # Choices: in-band or mgmt.  Default: mgmt
        pn_fabric_control_network: 'mgmt'              # Choices: in-band or mgmt.  Default: mgmt
        pn_static_setup: True                       # Flag to indicate if static values should be assign to following switch setup params. Default: True.
        pn_mgmt_ip: "{{ ansible_host }}"               # Specify MGMT-IP value to be assign if pn_static_setup is True.
        pn_mgmt_ip_subnet: '25'                        # Specify subnet mask for MGMT-IP value to be assign if pn_static_setup is True.
        pn_gateway_ip: '159.67.206.129'                   # Specify GATEWAY-IP value to be assign if pn_static_setup is True.
        pn_dns_ip: '138.83.67.15'                    # Specify DNS-IP value to be assign if pn_static_setup is True.
        pn_dns_secondary_ip: '138.83.162.53'               # Specify DNS-SECONDARY-IP value to be assign if pn_static_setup is True.
        pn_domain_name: 'verizon.com'          # Specify DOMAIN-NAME value to be assign if pn_static_setup is True.
        pn_ntp_server: '138.83.67.15'                # Specify NTP-SERVER value to be assign if pn_static_setup is True.
        pn_web_api: True                               # Flag to enable web api. Default: True
        pn_stp: True                                   # Specify True if you want to enable STP at the end. Default: False.
        pn_autotrunk: disable                          # Flag to enable/disable auto-trunk setting.
      register: ztp_out                                # Variable to hold/register output of the above tasks.
      until: ztp_out.failed != true                    # If the above code fails it will retry the code
      retries: 3                                       # This is the retries count
      delay: 3
    - pause:
        seconds: 5                                     # Pause playbook execution for specified amount of time.


# This is to enable host ports on all switches.
# This uses pn_port_config.py module form library/directory.
- name: Port config
  hosts: all
  tags: host-enable-ports
  ignore_errors: no

  tasks:
   - name:
     pn_port_config:
       pn_action: "modify"
       pn_port: "all"
       pn_host_enable: True 
     register: output
   - debug:
       var: output


# This task is to create/modify switch configs.
# It uses pn_switch_setup.py module from library/ directory.
# Add loopback-ip to all the switches.
- name: Modify loopback ip
  hosts: spine[0]
  tags: switch-setup

  tasks:
    - name: Modify loopback ip
      pn_switch_setup:
        pn_action: "modify"
        pn_cliswitch: "{{ item.pn_cliswitch }}"
        pn_loopback_ip: "{{ item.loopback }}"
        pn_ntp_secondary_server: "138.83.162.53"
      with_items:
        - {pn_cliswitch: 'tmtrflaan-de60116', loopback: '159.67.205.32'}
        - {pn_cliswitch: 'tmtrflaan-de60216', loopback: '159.67.205.33'}
        - {pn_cliswitch: 'tmtrflaan-de60316', loopback: '159.67.205.34'}
        - {pn_cliswitch: 'tmtrflaan-de60416', loopback: '159.67.205.35'}
        - {pn_cliswitch: 'tmtrflaan-we50116', loopback: '159.67.205.36'}
        - {pn_cliswitch: 'tmtrflaan-we50216', loopback: '159.67.205.37'}
        - {pn_cliswitch: 'tmtrflaan-we50316', loopback: '159.67.205.38'}
        - {pn_cliswitch: 'tmtrflaan-we50416', loopback: '159.67.205.39'}
      register: output
    - debug:
        var: output


# This task is for system flow setting.
# It uses pn_sys_flow_settings.py module from library/ directory.
# Sysflow setting to increase bucket size for ipv6 entries
# and the cpu-rx-rate
- name: Syetem flow setting
  hosts: spine, leaf
  tags: sys-flow-settings

  tasks:
    - name: System flow setting
      pn_sys_flow_setting:
        pn_cliswitch: "{{ inventory_hostname }}"       # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                            # Specify the action. choices=['modify']
        pn_num_ipv6_128b_entries: "256"                # Specify pn_num_ipv6_128b_entries value.
        pn_cpu_rx_rate_pps: "15000"                    # Specify pn_cpu_rx_rate_pps value.
        pn_nvos_reboot: False                               # Specify reboot required or not. We would keep False since it will be rebooting in next module.
      register: output
    - debug:
        var: output
    - pause:
        seconds: 5


# It uses pn_system_ettings.py module from library/ directory.
# Enable cosq weight auto 
- name: Enable cosq weight auto
  hosts: spine, leaf
  tags: cosq-weight-auto

  tasks:
    - name: Enable cosq weight auto
      pn_system_settings:
        pn_cliswitch: "{{ inventory_hostname }}"       # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                            # Specify the action. choices=['modify']
        pn_cosq_weight_auto: True                      # Specify to enable/disable cpu class.
      register: output
    - debug:
        var: output
    - pause:
        seconds: 5                                     # Pause playbook execution for specified amount of time.


# Static-Trunks between Leaf switches
# This task is to create/delete/modify trunk configs.
# It uses pn_trunk.py module from library/ directory.
- name:  create static trunk
  hosts: leaf
  tags: static-trunk

  tasks:
    - name: create trunk
      pn_trunk:
        pn_cliswitch: "{{ inventory_hostname }}"       # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                            # Specify the action. choices=['create', 'delete', 'modify']
        pn_name: "Static-128"                          # Specify the name of trunk.
        pn_bezel_ports: "49,50"                                # Specify the ports.
      register: output
    - debug:
        var: output
    - pause:
        seconds: 5                                     # Pause playbook execution for specified amount of time.


# This task is to create/modify switch configs.
# It uses pn_switch_setup.py module from library/ directory.
# Modify the banner and the timezone on the switches.
- name: Modify Banner
  hosts: spine,leaf
  tags: banner

  tasks:
   - name: Modify switch banner
     pn_switch_setup:
       pn_action: modify
       pn_timezone: "America/New_York"
       pn_banner: |
         "*********************** NOTICE ***********************
         This system is intended to be used solely by authorized
         users in the course of legitimate corporate business.
         Users are monitored to the extent necessary to properly
         administer the system, to identify unauthorized users
         or users operating beyond their proper authority, and to
         investigate improper access or use. By accessing this
         system, you are consenting to this monitoring.
         *********************** NOTICE ***********************"
     register: output
   - debug:
       var: output
   - pause:
        seconds: 5


# This task will create vrouter on spine switches.
# It uses pn_ztp_vrouter_setup.py module from library/ directory.
# If the tasks fails then it will retry as specified by retries count.
# Create vrouters on spine and add Loopback IP, VRRP ID and enable 
# pim-ssm. 
- name: Configure vrouter
  hosts: spine
  tags: vrouter-spine
  ignore_errors: no

  tasks:
    - name: Setup vrouter
      pn_ztp_vrouter_setup:
        pn_loopback_ip: '159.67.205.32/32'              # Loopback network to confgure ipv4 loopback ips to vrouters.
        pn_vrrp_id: '15'                               # Vrrp-id for the vrouters
        pn_current_switch: "{{ inventory_hostname }}"  # The name of the current executing switch
        pn_spine_list: "{{ groups['spine'] }}"         # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"           # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_pim_ssm: True                               # Variable to specify pim_ssm for ospf
        pn_ospf_redistribute: 'none'                 # Variable to configure ospf redistribute
      register: vrouter_out                            # Variable to hold/register output of the above tasks.
      until: vrouter_out.failed != true                # If the above code fails it will retry the code
      retries: 3                                       # This is the retries count
      delay: 3
    - pause:
        seconds: 5                                     # Pause playbook execution for specified amount of time.


# This task will create vrouter on leaf switches.
# It uses pn_ztp_vrouter_setup.py module from library/ directory.
# If the tasks fails then it will retry as specified by retries count.
# Create vrouters on leaf and add Loopback IP, VRRP ID and enable
# pim-ssm.
- name: Configure vrouter
  hosts: leaf
  tags: vrouter-leaf
  ignore_errors: no

  tasks:
    - name: Setup vrouter
      pn_ztp_vrouter_setup:
        pn_loopback_ip: '159.67.205.36/32'               # Loopback network to confgure ipv4 loopback ips to vrouters.
        pn_vrrp_id: '15'                                # Vrrp-id for the vrouters
        pn_current_switch: "{{ inventory_hostname }}"   # The name of the current executing switch
        pn_leaf_list: "{{ groups['leaf'] }}"            # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_pim_ssm: True                                # Variable to specify pim_ssm for ospf
        pn_ospf_redistribute: 'none'
      register: vrouter_leaf                            # Variable to hold/register output of the above tasks.
      until: vrouter_leaf.failed != true                # If the above code fails it will retry the code
      retries: 3                                        # This is the retries count
      delay: 3
    - pause:
        seconds: 5                                      # Pause playbook execution for specified amount of time.


# This task is to configure VRRP for Layer 3 fabric.
# It takes required VRRP config data from csv file.
# csv format: vlan-id, VIP, primary switch, secondary switch, vrrp-id, primary switch
# It uses pn_ztp_l3_vrrp.py module from library/ directory.
- name: Configure L3 VRRP
  hosts: leaf
  tags: l3-vrrp
  ignore_errors: no

  vars:
  - csv_file: vrrp_verizon.csv

  tasks:
    - name: Configure L3 vrrp
      pn_ztp_l3_vrrp:
        pn_spine_list: "{{ groups['spine'] }}"  # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"    # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_csv_data: "{{ lookup('file', '{{ csv_file }}') }}"  # Csv file containing L3 vrrp data.
        pn_pim_ssm: True                        # Variable to specify pim_ssm for ospf
        pn_jumbo_frames: True                   # Flag to assign mtu Default: False.
        pn_addr_type: 'ipv4'               # The type of address scheme to be used. Options: ipv4/dual_stack.
        pn_current_switch: "{{ inventory_hostname }}"  # Name of the switch on which this task is currently getting executed.
        #pn_ospf_redistribute: 'none'            # Variable to configure ospf redistribute
      register: vrrp_out                        # Variable to hold/register output of the above tasks.
      until:  vrrp_out.failed != true           # If error pops up it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.


# This task is to create VLAN 168 for tunnel with ports none.
# It uses pn_vlan.py module from library/ directory.
# If the tasks fails then it will retry as specified by retries count.
- name: VLAN Configuration
  tags: vlan-168
  hosts: leaf[0], leaf[2]
  ignore_errors: no

  tasks:
    - name: VLAN Configuration
      pn_vlan:
        pn_action: 'create'                             # The VLAN action to perform on the switches.
        pn_vlanid: '168'                                # VLAN id. It supports single VLAN id, a list of VLANs or a VLAN Range. 2 and 4092.
        pn_scope: 'cluster'                               # Scope for VLAN - fabric/local/cluster.
        pn_vxlan: '1680'                                  # VXLAN tunnel mapped to VLAN.
        pn_ports: 'none'
      register: output
    - debug:
        var: output


# Remove all ports from vlan 490
# This task is to remove ports to vlan.
# It uses pn_vlan_port.py module from library/ directory.
- name:  Remove port from vlan
  hosts: all
  tags: vlan-port-490

  tasks:
    - name: vlan add port
      pn_vlan_port:
        pn_action: "remove"
        pn_cliswitch: "{{ inventory_hostname }}"
        pn_ports: "all"
        pn_vlanid: "490"
      register: output
    - debug:
        var: output


# Add Nexus ports and vxlan-loopback trunk port
# to Leaf1-Leaf2 ports to vlan 490
# This task is to add ports to vlan.
# It uses pn_vlan_port.py module from library/ directory.
- name:  add port to vlan
  hosts: leaf[0], leaf[1]
  tags: vlan-port-490

  tasks:
    - name: vlan add port
      pn_vlan_port:
        pn_action: "add"
        pn_cliswitch: "{{ inventory_hostname }}"
        pn_ports: "2,5,49,53"
        pn_vlanid: "490"
      register: output
    - debug:
        var: output


# Add Host ports and vxlan-loopback trunk port
# to Leaf3-Leaf4 ports to vlan 490
# This task is to add ports to vlan.
# It uses pn_vlan_port.py module from library/ directory.
- name:  add port to vlan
  hosts: leaf[2], leaf[3]
  tags: vlan-port-490

  tasks:
    - name: vlan add port
      pn_vlan_port:
        pn_action: "add"
        pn_cliswitch: "{{ inventory_hostname }}"
        pn_ports: "1,2,49,53"
        pn_vlanid: "490"
      register: output
    - debug:
        var: output


# This task is to configure ZTP for layer3 fabric.
# It uses pn_ztp_l3_links.py module from library/ directory.
# If the tasks fails then it will retry as specified by retries count.
- name: Configure L3 links
  hosts: leaf
  tags: l3-links
  ignore_errors: no

  tasks:
    - name: Auto configure link IPs
      pn_ztp_l3_links:
        pn_current_switch: "{{ inventory_hostname }}"   # Name of the switch on which this task is currently getting executed.
        pn_spine_list: "{{ groups['spine'] }}"          # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"            # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_addr_type: 'ipv4'                       # The type of address scheme to be used. Options: ipv4/dual_stack.
        pn_ipv4_start_address: "159.67.205.68"            # Ipv4 Network address required to calculate link IPs for layer3 fabric.
        pn_cidr_ipv4: "26"                              # Ipv4 CIDR required to calculate link IPs for layer3 fabric.
        pn_subnet_ipv4: "31"                            # Ipv4 Subnet mask required to calculate link IPs for layer3 fabric.
        pn_if_nat_realm: 'internal'                     # Type of if_nat_realm. choices=['internal', 'external'], default='internal'
#        pn_ipv6_start_address: '2620:0000:167F:b001::40'  # Ipv6 Network address required to calculate link IPs for layer3 fabric.
#        pn_cidr_ipv6: "112"                             # ipv6 Subnet mask required to calculate link IPs for layer3 fabric.
#        pn_subnet_ipv6: "127"                           # Ipv6 Subnet mask required to calculate link IPs for layer3 fabric.
        pn_bfd: True                                  # Flag to indicate if BFD config should be added to vrouter interfaces. Default: False.
        pn_bfd_min_rx: 200                       # BFD-MIN-RX value required for adding BFD configuration to vrouter interfaces.
        pn_bfd_multiplier: 3                # BFD_MULTIPLIER value required for adding BFD configuration to vrouter interfaces.
        pn_update_fabric_to_inband: False          # Flag to indicate if fabric network should be updated to in-band. Default: False.
        pn_stp: True                                  # Flag to enable STP (spanning tree protocol). Default: False.
        pn_jumbo_frames: True                           # Flag to assign mtu Default: False.
      register: ztp_l3_out                              # Variable to hold/register output of the above tasks.
      until:  ztp_l3_out.failed != true                 # If error pops up it will retry the code
      retries: 3                                        # This is the retries count
      delay: 1

    - pause:
        seconds: 2                                      # Pause playbook execution for specified amount of time.


# This task is to create VLAN.
# It uses pn_vlan.py module from library/ directory.
# If the tasks fails then it will retry as specified by retries count.
- name: VLAN Configuration
  tags: inband-vlan
  hosts: spine, leaf
  ignore_errors: no

  tasks:
    - name: VLAN Configuration
      pn_vlan:
        pn_action: 'create'                             # The VLAN action to perform on the switches.
        pn_vlanid: '400'                                # VLAN id. It supports single VLAN id, a list of VLANs or a VLAN Range. 2 and 4092.
        pn_scope: 'local'                               # Scope for VLAN - fabric/local/cluster.
        pn_description: 'inbandMGMT'                    # VLAN description.
        pn_vxlan: '4000'                                  # VXLAN tunnel mapped to VLAN.
        pn_ports: 'none'
      register: output
    - debug:
        var: output


# This task is to modify fabric to local scope.
# It uses pn_fabric_local.py module from library/ directory.
- name: fabric local module
  hosts: spine, leaf
  tags: fabric-local
  ignore_errors: no

  tasks:
    - name: fabric local modify
      pn_fabric_local:
        pn_current_switch: "{{ inventory_hostname }}"     # Name of the switch on which this task is currently getting executed.
        pn_action: 'modify'                                  # Action to be performed
        pn_vlan: '400'                                    # VLAN id. It supports single VLAN id, a list of VLANs or a VLAN Range. 2 and 4092.
      register: output
    - debug:
        var: output


# This task is to create vrouter interface.
# It uses pn_vrouter_iface.py module from library/ directory.
# This is the l3 interface on Leaf1 towards Nexus1
- name: vrouter interface modules
  hosts: leaf[0]
  tags: leaf-svi
  ignore_errors: no

  tasks:
    - name: Add a vrouter interface
      pn_vrouter_iface:
        pn_action: "add"                                # vRouter interface command - add/remove/modify.
        pn_vrouter: "{{ inventory_hostname }}-vrouter"  # Name of the vrouter.
        pn_interface_ip: "159.67.205.65/31"                  # IP address for the interface in x.x.x.x/n format.
        pn_l3port: 1
        pn_mtu: "9216"                                  # Interface MTU.
      register: output
    - debug:
        var: output


# This task is to create vrouter interface.
# It uses pn_vrouter_iface.py module from library/ directory.
# This is the l3 interface on Leaf2 towards Nexus2
- name: vrouter interface  modules
  hosts: leaf[1]
  tags: leaf-svi
  ignore_errors: no

  tasks:
    - name: Add a vrouter interface
      pn_vrouter_iface:
        pn_action: "add"                               # vRouter interface command - add/remove/modify.
        pn_vrouter: "{{ inventory_hostname }}-vrouter" # Name of the vrouter.
        pn_interface_ip: "159.67.205.67/31"                # IP address for the interface in x.x.x.x/n format.
        pn_l3port: 1
        pn_mtu: "9216"                                  # Interface MTU.
      register: output
    - debug:
        var: output


# This task is to configure OSPF.
# It uses pn_ztp_bgp_ospf.py module from library/ directory.
# Create iOSPF vlan between Leaf switches and create high
# cost ospf interfaces between them
- name: Configure OSPF
  hosts: all
  tags: iospf-leaf
  ignore_errors: no

  tasks:
    - name: Configure OSPF
      pn_ztp_ospf:
        pn_current_switch: "{{ inventory_hostname }}"      # Name of the switch on which this task is currently getting executed.
        pn_spine_list: "{{ groups['spine'] }}"             # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"               # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_bfd: True                                    # Indicate if BFD config should be added to eBGP. Default: False.
        pn_routing_protocol: 'ospf'                        # Routing protocol to configure. Choices are ['ebgp', 'ospf']
        pn_ospf_v4_area_id: "0"                      # Area id to configure for ospfv4. Default: 0
#        pn_ospf_v6_area_id: "0.0.0.0"                  # Area id to configure for ospfv6. Default: 0.0.0.0
        pn_iospf_vlan: "4040"                             # Vlan for creating the interfaces between leaf clusters. Default:'4040'
        pn_iospf_ipv4_range: "159.67.205.100"              # Ip range for creating the interfaces between leaf clusters.
        pn_cidr_ipv4: "30"                                 # subnet count for iospf ip range
        pn_subnet_ipv4: "31"                               # ipv4 subnet for iospf
#        pn_iospf_ipv6_range: "2610:0000:167F:b001::a0"     # Ip range for creating the interfaces between leaf clusters.
#        pn_cidr_ipv6: "112"                                # subnet count for iospf ip range
#        pn_subnet_ipv6: "127"                              # ipv4 subnet for iospf
        pn_ospf_cost: "10000"                              # ospf cost. Default: '10000'.
        pn_addr_type: 'ipv4'                          # The type of address scheme to be used. Options: ipv4/dual_stack.
        pn_ospf_redistribute: "none"                  # Variable to configure ospf redistribute
        pn_pim_ssm: True                                  # pim-ssm variable for configuration
        pn_area_configure_flag: "singlearea"               # Varible to configure area choices=['singlearea', 'dualarea'], default='singlearea'
        pn_jumbo_frames: True                              # Flag to assign mtu Default: False.
      register: ospf_out                                   # Variable to hold/register output of the above tasks.
      until: ospf_out.failed != true                       # If the above code fails it will retry the code
      retries: 3                                           # This is the retries count
      delay: 1

    - pause:
        seconds: 2                                         # Pause playbook execution for specified amount of time.


# This task is to create vrouter interface.
# It uses pn_vrouter_iface.py module from library/ directory.
# Create SVI interface on Spine 1 for VLAN 490
- name: vrouter interface modules
  hosts: spine[0]
  tags: spine-svi
  ignore_errors: no

  tasks:
    - name: Add a vrouter interface
      pn_vrouter_iface:
        pn_action: "add"                                # vRouter interface command - add/remove/modify.
        pn_vrouter: "{{ inventory_hostname }}-vrouter"  # Name of the vrouter.
        pn_vlan: "490"                                  # Interface vlan.
        pn_interface_ip: "192.168.3.1/29"                  # IP address for the interface in x.x.x.x/n format.
        pn_mtu: "9216"                                  # Interface MTU.
      register: output
    - debug:
        var: output


# This task is to create vrouter interface.
# It uses pn_vrouter_iface.py module from library/ directory.
# Create SVI interface on Spine 2 for VLAN 490
- name: vrouter interface  modules
  hosts: spine[1]
  tags: spine-svi
  ignore_errors: no

  tasks:
    - name: Add a vrouter interface
      pn_vrouter_iface:
        pn_action: "add"                               # vRouter interface command - add/remove/modify.
        pn_vrouter: "{{ inventory_hostname }}-vrouter" # Name of the vrouter.
        pn_vlan: "490"                                 # Interface vlan.
        pn_interface_ip: "192.168.3.9/29"                # IP address for the interface in x.x.x.x/n format.
        pn_mtu: "9216"                                 # Interface MTU.
      register: output
    - debug:
        var: output


# This task is to create vrouter interface.
# It uses pn_vrouter_iface.py module from library/ directory.
# Create SVI interface on Spine 3 for VLAN 490
- name: vrouter interface modules
  hosts: spine[2]
  tags: spine-svi
  ignore_errors: no

  tasks:
    - name: Add a vrouter interface
      pn_vrouter_iface:
        pn_action: "add"                                # vRouter interface command - add/remove/modify.
        pn_vrouter: "{{ inventory_hostname }}-vrouter"  # Name of the vrouter.
        pn_vlan: "490"                                  # Interface vlan.
        pn_interface_ip: "192.168.3.17/29"                  # IP address for the interface in x.x.x.x/n format.
        pn_mtu: "9216"                                  # Interface MTU.
      register: output
    - debug:
        var: output


# This task is to create vrouter interface.
# It uses pn_vrouter_iface.py module from library/ directory.
# Create SVI interface on Spine 4 for VLAN 490
- name: vrouter interface  modules
  hosts: spine[3]
  tags: spine-svi
  ignore_errors: no

  tasks:
    - name: Add a vrouter interface
      pn_vrouter_iface:
        pn_action: "add"                               # vRouter interface command - add/remove/modify.
        pn_vrouter: "{{ inventory_hostname }}-vrouter" # Name of the vrouter.
        pn_vlan: "490"                                 # Interface vlan.
        pn_interface_ip: "192.168.3.25/29"                # IP address for the interface in x.x.x.x/n format.
        pn_mtu: "9216"                                 # Interface MTU.
      register: output
    - debug:
        var: output


# This task is to add ospf network
# It uses pn_vrouter_ospf.py module from library/ directory.
# Add Spine SVI network to OSPF
- name: Add ospf network
  hosts: spine[0]
  tags: spine-svi-ospf
  ignore_errors: no

  tasks:
    - name: Add spine-svi network to ospf
      pn_vrouter_ospf:
        pn_action: "add"                               # vRouter interface command - add/remove/modify.
        pn_vrouter: "{{ item.vrouter_name }}"          # Name of the vrouter.
        pn_network: "{{ item.ip }}"                    # IP address for the interface in x.x.x.x format.
        pn_netmask: "{{ item.netmask }}"               # Network netmask
        pn_ospf_area: "0"                              # Interface vlan.
      with_items:
        - {vrouter_name: 'tmtrflaan-de60116-vrouter', ip: '192.168.3.0', netmask: '29'}
        - {vrouter_name: 'tmtrflaan-de60216-vrouter', ip: '192.168.3.8', netmask: '29'}
        - {vrouter_name: 'tmtrflaan-de60316-vrouter', ip: '192.168.3.16', netmask: '29'}
        - {vrouter_name: 'tmtrflaan-de60416-vrouter', ip: '192.168.3.24', netmask: '29'}
      register: output
    - debug:
        var: output


# This task is to configure VXLAN full mesh.
# It uses pn_ztp_vxlan.py module from library/ directory.
# If the tasks fails then it will retry as specified by retries count.
# Create full-mesh tunnels from every switch/cluster to every other
# switch/cluster with vxlan loopback port 41 with overlay VLAN 490
- name: ZTP VXLAN configuration
  hosts: spine[0]
  tags: vxlan
  ignore_errors: no

  tasks:
    - name: ZTP Vxlan configuration
      pn_ztp_vxlan:
        pn_spine_list: "{{ groups['spine'] | default([]) }}"   # List of spine switches
        pn_leaf_list: "{{ groups['leaf'] | default([])}}"      # List of leaf switches
        pn_tunnel_mode: 'full-mesh'                            # Flag to indicate tunnel mode type Choices: full-mesh or manual.  Default: full-mesh.
        pn_tunnel_loopback_port: '41'                          # Port to configure loopback
        pn_tunnel_vxlan_id: '4000'                             # Specify vxlan id for configuration
        pn_tunnel_overlay_vlan: '490'                          # Specify overlay vlan
      register: vxlan_config                                   # Variable to hold/register output of the above tasks.
      until: vxlan_config.failed != true                       # If the above code fails it will retry the code
      retries: 3                                               # This is the retries count
      delay: 3
    - pause:
        seconds: 2                                             # Pause playbook execution for specified amount of time.


# This task is to configure VXLAN.
# It uses pn_ztp_vxlan.py module from library/ directory.
# If the tasks fails then it will retry as specified by retries count.
# Create tunnel between Leaf clusters and add the vxlan-vlan 1680 to
# this tunnel
- name: ZTP VXLAN configuration
  hosts: leaf[0]
  tags: vxlan-inter-leaf
  ignore_errors: no

  tasks:
    - name: ZTP Vxlan configuration
      pn_ztp_vxlan:
        pn_leaf_list: "{{ groups['leaf'] | default([])}}"      # List of leaf switches
        pn_tunnel_mode: 'manual'                               # Flag to indicate tunnel mode type Choices: full-mesh or manual.  Default: full-mesh.
        pn_tunnel_endpoint1: 'tmtrflaan-we50116'
        pn_tunnel_endpoint2: 'tmtrflaan-we50316'
        pn_tunnel_loopback_port: '41'                          # Port to configure loopback
        pn_tunnel_vxlan_id: '1680'                   # Specify vxlan id for configuration
        pn_tunnel_overlay_vlan: '490'                          # Specify overlay vlan
      register: vxlan_config                                   # Variable to hold/register output of the above tasks.
      until: vxlan_config.failed != true                       # If the above code fails it will retry the code
      retries: 3                                               # This is the retries count
      delay: 3
    - pause:
        seconds: 2                                             # Pause playbook execution for specified amount of time.


# Add Host ports, nexus ports and vxlan-loopback trunk port
# to Leaf1-Leaf2 ports to vlan 168
# This task is to add ports to vlan.
# It uses pn_vlan_port.py module from library/ directory.
- name:  add port to vlan
  hosts: leaf[0], leaf[1]
  tags: vlan-port-168

  tasks:
    - name: vlan add port
      pn_vlan_port:
        pn_action: "add"
        pn_cliswitch: "{{ inventory_hostname }}"
        pn_ports: "2,5,49,53,253"
        pn_vlanid: "168"
      register: output
    - debug:
        var: output


# Add Host ports and vxlan-loopback trunk port to Leaf3-Leaf4 ports to vlan 168
# This task is to add ports to vlan.
# It uses pn_vlan_port.py module from library/ directory.
- name:  add port to vlan
  hosts: leaf[2], leaf[3]
  tags: vlan-port-168

  tasks:
    - name: vlan add port
      pn_vlan_port:
        pn_action: "add"
        pn_cliswitch: "{{ inventory_hostname }}"
        pn_ports: "1,2,49,53,253"
        pn_vlanid: "168"
      register: output
    - debug:
        var: output


# Remove all ports from vlan 400
# This task is to remove ports to vlan.
# It uses pn_vlan_port.py module from library/ directory.
- name:  Remove port from vlan
  hosts: all
  tags: vlan-port-400

  tasks:
    - name: vlan add port
      pn_vlan_port:
        pn_action: "remove"
        pn_cliswitch: "{{ inventory_hostname }}"
        pn_ports: "all"
        pn_vlanid: "400"
      register: output
    - debug:
        var: output


# Add vxlan-loopback trunk port
# to Spine ports to vlan 400
# This task is to add ports to vlan.
# It uses pn_vlan_port.py module from library/ directory.
- name:  add port to vlan
  hosts: spine
  tags: vlan-port-400

  tasks:
    - name: vlan add port
      pn_vlan_port:
        pn_action: "add"
        pn_cliswitch: "{{ inventory_hostname }}"
        pn_ports: "41"
        pn_vlanid: "400"
      register: output
    - debug:
        var: output


# Add Host ports, nexus ports and vxlan-loopback trunk port
# to Leaf1-Leaf2 ports to vlan 400
# This task is to add ports to vlan.
# It uses pn_vlan_port.py module from library/ directory.
- name:  add port to vlan
  hosts: leaf[0], leaf[1]
  tags: vlan-port-400

  tasks:
    - name: vlan add port
      pn_vlan_port:
        pn_action: "add"
        pn_cliswitch: "{{ inventory_hostname }}"
        pn_ports: "2,5,49,53,253"
        pn_vlanid: "400"
      register: output
    - debug:
        var: output


# Add Host ports and vxlan-loopback trunk port to Leaf3-Leaf4 ports to vlan 400
# This task is to add ports to vlan.
# It uses pn_vlan_port.py module from library/ directory.
- name:  add port to vlan
  hosts: leaf[2], leaf[3]
  tags: vlan-port-400

  tasks:
    - name: vlan add port
      pn_vlan_port:
        pn_action: "add"
        pn_cliswitch: "{{ inventory_hostname }}"
        pn_ports: "1,2,49,53,253"
        pn_vlanid: "400"
      register: output
    - debug:
        var: output


# This task will configure bgp-as in switches.
# It uses pn_vrouter.py module from library/ directory.
# Assign BGP AS# 65403 to Leaf1 and Leaf2
- name: vrouter bgp network module
  hosts: leaf[0:1]
  tags: bgp-as
  ignore_errors: no

  tasks:
    - name: vrouter bgp network add functionality
      pn_vrouter:
        pn_name: "{{ inventory_hostname }}-vrouter"
        pn_action: "modify"
        pn_bgp_as: "65403"
        pn_ospf_default_information: "originate"
      register: output
    - debug:
        var: output


# This task is to add loopback ip to bgp network.
# It uses pn_vrouter_bgp_network.py module from library/ directory.
# Advertise Loopback IPs via BGP 
- name: vrouter bgp network module
  hosts: leaf[0],leaf[1]
  tags: bgp-network
  ignore_errors: no

  tasks:
    - name: vrouter bgp network add functionality
      pn_vrouter_bgp_network: pn_vrouter_name={{ item.vrouter }} pn_network={{ item.ip }} pn_netmask={{ item.netmask }} pn_action={{ item.action }}
      with_items:
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.32', netmask: '32', action: 'add'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.33', netmask: '32', action: 'add'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.34', netmask: '32', action: 'add'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.35', netmask: '32', action: 'add'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.36', netmask: '32', action: 'add'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.37', netmask: '32', action: 'add'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.38', netmask: '32', action: 'add'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.39', netmask: '32', action: 'add'}
      register: output
    - debug:
        var: output


# This task is to add L3 link ips to bgp network.
# It uses pn_vrouter_bgp_network.py module from library/ directory.
# Advertise all L3 link IPs (/32) via BGP
- name: vrouter bgp network module
  hosts: leaf[0], leaf[1]
  tags: bgp-network
  ignore_errors: no

  tasks:
    - name: vrouter bgp network add functionality
      pn_vrouter_bgp_network: pn_vrouter_name={{ item.vrouter }} pn_network={{ item.ip }} pn_netmask={{ item.netmask }} pn_action='add'
      with_items:
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.68', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.69', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.70', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.71', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.72', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.73', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.74', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.75', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.76', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.77', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.78', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.79', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.80', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.81', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.82', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.83', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.84', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.85', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.86', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.87', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.88', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.89', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.90', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.91', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.92', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.93', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.94', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.95', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.96', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.97', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.98', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.99', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.100', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.101', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.102', netmask: '32'}
        - {vrouter: '{{ inventory_hostname }}-vrouter', ip: '159.67.205.103', netmask: '32'}
      register: output
    - debug:
        var: output


# This task is to add BGP neighbors.
# It uses pn_vrouter_bgp.py module from library/ directory.
# Add Nexus1 as neighbor to Leaf1
# Add Nexus2 as neighbor to Leaf2
- name: "Configure vrouter-bgp"
  hosts: leaf[0]
  tags: vrouter-bgp
  ignore_errors: no

  tasks:
    - name: "Configure vrouter-bgp"
      pn_vrouter_bgp:
        pn_action: "add"
        pn_vrouter: "{{ item.vrouter }}"
        pn_neighbor: "{{ item.neighbor }}"
        pn_remote_as: "{{ item.remote }}"
        pn_next_hop_self: True
        pn_soft_reconfig: True
      with_items:
        - {vrouter: 'tmtrflaan-we50116-vrouter', neighbor: '159.67.205.64', remote: '64592'}
        - {vrouter: 'tmtrflaan-we50216-vrouter', neighbor: '159.67.205.66', remote: '64592'}
      register: output
    - debug:
        var: output


# This task is to add BGP neighbors.
# It uses pn_vrouter_bgp.py module from library/ directory.
# Add inter-cluster iOSPF IP as neighbors
- name: "Configure vrouter-bgp"
  hosts: leaf[0]
  tags: vrouter-bgp
  ignore_errors: no

  tasks:
    - name: "Configure vrouter-bgp"
      pn_vrouter_bgp:
        pn_action: "add"
        pn_vrouter: "{{ item.vrouter }}"
        pn_neighbor: "{{ item.neighbor }}"
        pn_remote_as: "{{ item.remote }}"
        pn_soft_reconfig: True
      with_items:
        - {vrouter: 'tmtrflaan-we50116-vrouter', neighbor: '159.67.205.101', remote: '65403'}
        - {vrouter: 'tmtrflaan-we50216-vrouter', neighbor: '159.67.205.100', remote: '65403'}
      register: output
    - debug:
        var: output


# This task is to add BGP neighbors.
# It uses pn_vrouter_bgp.py module from library/ directory.
# Add loopback IP as neighbors
- name: "Configure vrouter-bgp"
  hosts: leaf[0]
  tags: vrouter-bgp
  ignore_errors: no

  tasks:
    - name: "Configure vrouter-bgp"
      pn_vrouter_bgp:
        pn_action: "add"
        pn_vrouter: "{{ item.vrouter }}"
        pn_neighbor: "{{ item.neighbor }}"
        pn_remote_as: "{{ item.remote }}"
        pn_update_src: "{{ item.src }}"
      with_items:
        - {vrouter: 'tmtrflaan-we50116-vrouter', neighbor: '159.67.205.37', remote: '65403', src: '159.67.205.36'}
        - {vrouter: 'tmtrflaan-we50216-vrouter', neighbor: '159.67.205.36', remote: '65403', src: '159.67.205.37'}
      register: output
    - debug:
        var: output


# This task is to modify vrouter pim config
# It uses pn_vrouter_pim_config module from library/ directory.
# Set IGMP query interval and querier timeout
- name: vrouter pim config module
  hosts: spine, leaf
  tags: vrouter-pim-config
  ignore_errors: no

  tasks:
    - name: pim config modify
      pn_vrouter_pim_config:
        pn_cliswitch: "{{ inventory_hostname }}"            # Name of the switch on which this task is currently getting executed.
        pn_query_interval: '10'                             # query-interval  igmp query interval in seconds
        pn_querier_timeout: '30'                            # querier-timeout igmp querier timeout in seconds
        pn_action: 'modify'                                    # Action to be performed
      register: output
    - debug:
        var: output


# VLAG between Leaf 1&2 and Nexus1
# This task is to create/delete/modify vlag configs.
# It uses pn_vlag.py module from library/ directory.
- name:  create vlag
  hosts: leaf[0]
  tags: vlag

  tasks:
    - name: create vlag
      pn_vlag:
        pn_action: "create"                            # Specify the action. choices=['create', 'delete', 'modify']
        pn_name: "501pair-to-wn701-vlag"                           # Specify the name of vlag.
        pn_port: "2"                          # Specify the port of vlag.
        pn_peer_port: "5"                     # Specify the peer port.
        pn_mode: "active-active"                       # Specify mode. choices=['active-standby', 'active-active'].
        pn_lacp_mode: "active"                        # Specify lacp mode. choices=['off', 'passive', 'active'].
      register: output
    - debug:
        var: output


# VLAG between Leaf 1&2 and Nexus1
# This task is to create/delete/modify vlag configs.
# It uses pn_vlag.py module from library/ directory.
- name:  create vlag
  hosts: leaf[0]
  tags: vlag

  tasks:
    - name: create vlag
      pn_vlag:
        pn_action: "create"                            # Specify the action. choices=['create', 'delete', 'modify']
        pn_name: "501pair-to-wn702-vlag"                           # Specify the name of vlag.
        pn_port: "5"                          # Specify the port of vlag.
        pn_peer_port: "2"                     # Specify the peer port.
        pn_mode: "active-active"                       # Specify mode. choices=['active-standby', 'active-active'].
        pn_lacp_mode: "active"                        # Specify lacp mode. choices=['off', 'passive', 'active'].
      register: output
    - debug:
        var: output


# Stp port modify on leaf1,leaf2.
# This task is to modify stp.
# It user pn_stp_port.py module from modules directory.
- name: Modify stp
  hosts: leaf[0], leaf[1]
  tags: stp-port

  tasks:
    - name: Modify stp
      pn_stp_port:
        pn_action: "modify"                        # Specify the action. choices=['modify']
        pn_port: "2,5"                             # Specify the port.
        pn_cost: "200"                             # Specify the cost.
      register: output
    - debug:
        var: output


# VLAG between Leaf 3&4 and HostA
# This task is to create/delete/modify vlag configs.
# It uses pn_vlag.py module from library/ directory.
- name:  create vlag
  hosts: leaf[2]
  tags: vlag

  tasks:
    - name: create vlag
      pn_vlag:
        pn_action: "create"                            # Specify the action. choices=['create', 'delete', 'modify']
        pn_name: "503pair-to-hostA-vlag"                           # Specify the name of vlag.
        pn_port: "1"                          # Specify the port of vlag.
        pn_peer_port: "1"                     # Specify the peer port.
        pn_mode: "active-active"                       # Specify mode. choices=['active-standby', 'active-active'].
        pn_lacp_mode: "active"                        # Specify lacp mode. choices=['off', 'passive', 'active'].
      register: output
    - debug:
        var: output


# VLAG between Leaf 3&4 and HostB
# This task is to create/delete/modify vlag configs.
# It uses pn_vlag.py module from library/ directory.
- name:  create vlag
  hosts: leaf[2]
  tags: vlag

  tasks:
    - name: create vlag
      pn_vlag:
        pn_action: "create"                            # Specify the action. choices=['create', 'delete', 'modify']
        pn_name: "503pair-to-hostB-vlag"                           # Specify the name of vlag.
        pn_port: "2"                          # Specify the port of vlag.
        pn_peer_port: "2"                     # Specify the peer port.
        pn_mode: "active-active"                       # Specify mode. choices=['active-standby', 'active-active'].
        pn_lacp_mode: "active"                        # Specify lacp mode. choices=['off', 'passive', 'active'].
      register: output
    - debug:
        var: output


## VLAG between Leaf1&2 and Pica8-1
## This task is to create/delete/modify vlag configs.
## It uses pn_vlag.py module from library/ directory.
#- name:  create vlag
#  hosts: leaf[0]
#  tags: vlag
#
#  tasks:
#    - name: create vlag
#      pn_vlag:
#        pn_action: "create"                            # Specify the action. choices=['create', 'delete', 'modify']
#        pn_name: "PN-to-P8-sw1"                           # Specify the name of vlag.
#        pn_port: "48"                          # Specify the port of vlag.
#        pn_peer_port: "48"                     # Specify the peer port.
#        pn_peer_switch: "tmtrflaan-we50216"
#      register: output
#    - debug:
#        var: output
#
#
## VLAG between Leaf1&2 and Pica8-2
## This task is to create/delete/modify vlag configs.
## It uses pn_vlag.py module from library/ directory.
#- name:  create vlag
#  hosts: leaf[0]
#  tags: vlag
#
#  tasks:
#    - name: create vlag
#      pn_vlag:
#        pn_action: "create"                            # Specify the action. choices=['create', 'delete', 'modify']
#        pn_name: "PN-to-P8-sw2"                           # Specify the name of vlag.
#        pn_port: "47"                          # Specify the port of vlag.
#        pn_peer_port: "47"                     # Specify the peer port.
#        pn_peer_switch: "tmtrflaan-we50216"
#      register: output
#    - debug:
#        var: output
#
#
## VLAG between Leaf1&2 and Pica8-3
## This task is to create/delete/modify vlag configs.
## It uses pn_vlag.py module from library/ directory.
#- name:  create vlag
#  hosts: leaf[0]
#  tags: vlag
#
#  tasks:
#    - name: create vlag
#      pn_vlag:
#        pn_action: "create"                            # Specify the action. choices=['create', 'delete', 'modify']
#        pn_name: "PN-to-P8-sw3"                           # Specify the name of vlag.
#        pn_port: "46"                          # Specify the port of vlag.
#        pn_peer_port: "46"                     # Specify the peer port.
#        pn_peer_switch: "tmtrflaan-we50216"
#      register: output
#    - debug:
#        var: output
#
#
## VLAG between Leaf1&2 and Pica8-4
## This task is to create/delete/modify vlag configs.
## It uses pn_vlag.py module from library/ directory.
#- name:  create vlag
#  hosts: leaf[0]
#  tags: vlag
#
#  tasks:
#    - name: create vlag
#      pn_vlag:
#        pn_action: "create"                            # Specify the action. choices=['create', 'delete', 'modify']
#        pn_name: "PN-to-P8-sw4"                           # Specify the name of vlag.
#        pn_port: "45"                          # Specify the port of vlag.
#        pn_peer_port: "45"                     # Specify the peer port.
#        pn_peer_switch: "tmtrflaan-we50216"
#      register: output
#    - debug:
#        var: output


# This task is to modify admin service.
# It uses pn_admin_service.py module from library/ directory.
# Disable web and web-ssl on mgmt interface
- name: admin service module
  hosts: spine, leaf
  tags: admin-service
  ignore_errors: no

  tasks:
    - name: admin service functionality
      pn_admin_service:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                             # admin service configuration command:modify.
        pn_web: False                                   # Specify web type True/False.
        pn__if: "mgmt"                                  # Specify type of network
        pn_web_ssl: False                               # Specify web ssl type True/False.
        pn_snmp: True                                   # Specify snmp type True/False.
        pn_net_api: True                                # Specify net api type True/False.
        pn_icmp: True                                   # Specify icmp type True/False.
        pn_ssh: True                                    # Specify ssh type True/False.
        pn_nfs: True                                    # Specify nfs type True/False.
      register: output
    - debug:
        var: output


# This task is to modify admin service.
# It uses pn_admin_service.py module from library/ directory.
# Disable web and web-ssl on data interface
- name: admin service module
  hosts: spine, leaf
  tags: admin-service
  ignore_errors: no

  tasks:
    - name: admin service functionality
      pn_admin_service:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                             # admin service configuration command:modify.
        pn_web: False                                   # Specify web type True/False.
        pn__if: "data"                                  # Specify type of network
        pn_web_ssl: False                               # Specify web ssl type True/False.
        pn_snmp: True                                   # Specify snmp type True/False.
        pn_net_api: True                                # Specify net api type True/False.
        pn_icmp: True                                   # Specify icmp type True/False.
        pn_ssh: True                                    # Specify ssh type True/False.
        pn_nfs: True                                    # Specify nfs type True/False.
      register: output
    - debug:
        var: output


# This task is to modify admin session timout.
# It uses pn_admin_session_timeout.py module from library/ directory.
# Set admin session timeout
- name: admin session timeout
  hosts: spine, leaf
  tags: admin-session-timeout
  ignore_errors: no

  tasks:
    - name: admin session timeout functionality
      pn_admin_session_timeout:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                             # admin session timeout configuration choice=modify.
        pn_timeout: '3600s'                             # Specify duration of timeout of admin session
      register: output
    - debug:
        var: output


# This task is to create snmp user.
# It uses pn_snmp_user.py module from library/ directory.
# create/delete/modify for SNMPv3 users.
- name: snmp user module
  hosts: spine, leaf
  tags: snmp-user

  tasks:
    - name: snmp-user functionality
      pn_snmp_user:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # snmp-user configuration command: create/delete.
        pn_user_name: "VINETro"                         # snmp user name.
        pn_auth: True                                   # snmp authentication required.
        pn_priv: True                                   # snmp privileges.
        pn_auth_pass: "{{ auth_pass }}"                      # snmp authentication password. Add to vault file as key:value pair :- auth_pass: 'baseball'
        pn_priv_pass: "{{ auth_pass }}"                        # snmp privilege password
      register: output
    - debug:
        var: output


# This task is to create snmp user.
# It uses pn_snmp_user.py module from library/ directory.
# create/delete/modify for SNMPv3 users.
- name: snmp user module
  hosts: spine, leaf
  tags: snmp-user

  tasks:
    - name: snmp-user functionality
      pn_snmp_user:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # snmp-user configuration command: create/delete.
        pn_user_name: "VINETrw"                         # snmp user name.
        pn_auth: True                                   # snmp authentication required.
        pn_priv: True                                   # snmp privileges.
        pn_auth_pass: "{{ auth_pass }}"                        # snmp authentication password.
        pn_priv_pass: "{{ auth_pass }}"                        # snmp privilege password
      register: output
    - debug:
        var: output


# This task is to create snmp community.
# It uses pn_snmp_community.py module from library/ directory.
# create/delete/modify for SNMP communities for SNMPv1
- name: snmp community module
  hosts: spine, leaf
  tags: snmp-community

  tasks:
    - name: snmp-community functionality
      pn_snmp_community:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # snmp-community configuration command: create/delete/modify.
        pn_community_string: "vz1net"                 # snmp-communtiy string name.
        pn_community_type: "read-write"                 # snmp-communtiy string type. choices=['read-only', 'read-write']
      register: output
    - debug:
        var: output


    - name: snmp-community functionality
      pn_snmp_community:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # snmp-community configuration command: create/delete/modify.
        pn_community_string: "Baywatch"                 # snmp-communtiy string name.
        pn_community_type: "read-only"                  # snmp-communtiy string type. choices=['read-only', 'read-write']
      register: output
    - debug:
        var: output


    - name: snmp-community functionality
      pn_snmp_community:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # snmp-community configuration command: create/delete/modify.
        pn_community_string: "F4u1tMgmt"                 # snmp-communtiy string name.
        pn_community_type: "read-write"                  # snmp-communtiy string type. choices=['read-only', 'read-write']
      register: output
    - debug:
        var: output


# This task is to create/delete snmp trap sink.
# It uses pn_snmp_trap_sink.py module from library/ directory.
- name: snmp trap sink module
  hosts: spine, leaf
  tags: snmp-trap-sink

  tasks:
    - name: snmp trap sink functionality
      pn_snmp_trap_sink:
        pn_action: "create"
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_community: "F4u1tMgmt"                        # snmp community string.
        pn_type: "TRAP_TYPE_V2_INFORM"                  # snmp trap type. Default: "TRAP_TYPE_V2C_TRAP". choices: ['TRAP_TYPE_V1_TRAP', 'TRAP_TYPE_V2C_TRAP', 'TRAP_TYPE_V2_INFORM'].
        pn_dest_host: "138.83.67.8"                  # snmp dest host.
      register: output
    - debug:
        var: output


# This task is to create/delete snmp trap sink.
# It uses pn_snmp_trap_sink.py module from library/ directory.
- name: snmp trap sink module
  hosts: spine, leaf
  tags: snmp-trap-sink

  tasks:
    - name: snmp trap sink functionality
      pn_snmp_trap_sink:
        pn_action: "create"
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_community: "F4u1tMgmt"                        # snmp community string.
        pn_type: "TRAP_TYPE_V2_INFORM"                  # snmp trap type. Default: "TRAP_TYPE_V2C_TRAP". choices: ['TRAP_TYPE_V1_TRAP', 'TRAP_TYPE_V2C_TRAP', 'TRAP_TYPE_V2_INFORM'].
        pn_dest_host: "166.68.224.45"                  # snmp dest host.
      register: output
    - debug:
        var: output


# This task is to create/modify snmp vacm.
# It uses pn_snmp_vacm.py module from library/ directory.
- name: snmp vacm module
  hosts: spine, leaf
  tags: snmp-vacm

  tasks:
    - name: snmp vacm functionality
      pn_snmp_vacm:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # snmp vacm configuration command: create/delete/modify.
        pn_user_name: "VINETro"                         # Specify the name of the snmp vacm.
        pn_auth: True                                   # snmp authentication required.
        pn_priv: True                                   # snmp privileges.
        pn_user_type: "rouser"                          # Specify snmp vacm user type. choices=choices=['rouser', 'rwuser']
      register: output
    - debug:
        var: output


# This task is to create/modify snmp vacm.
# It uses pn_snmp_vacm.py module from library/ directory.
- name: snmp vacm module
  hosts: spine, leaf
  tags: snmp-vacm

  tasks:
    - name: snmp vacm functionality
      pn_snmp_vacm:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # snmp vacm configuration command: create/delete/modify.
        pn_user_name: "VINETrw"                         # Specify the name of the snmp vacm.
        pn_auth: True                                   # snmp authentication required.
        pn_priv: True                                   # snmp privileges.
        pn_user_type: "rwuser"                          # Specify snmp vacm user type. choices=choices=['rouser', 'rwuser']
      register: output
    - debug:
        var: output


# This task is to create/modify admin syslog.
# It uses pn_admin_syslog.py module from library/ directory.
- name: admin syslog module
  hosts: spine, leaf
  tags: admin-syslog

  tasks:
    - name: admin-syslog functionality
      pn_admin_syslog:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # admin-syslog configuration command: create/delete/modify.
        pn_name: "vzsyslog1"                             # Specify the name of the admin-syslog.
        pn_scope: "fabric"                              # Specify the name of the scope. local/fabric
        pn_host: "138.83.67.8"                        # Specify host ip.
        pn_message_format: 'structured'                 # structured/legacy
      register: output
    - debug:
        var: output


# This task is to create/modify admin syslog.
# It uses pn_admin_syslog.py module from library/ directory.
- name: admin syslog module
  hosts: spine[0]
  tags: admin-syslog

  tasks:
    - name: admin-syslog functionality
      pn_admin_syslog:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # admin-syslog configuration command: create/delete/modify.
        pn_name: "vzsyslog2"                             # Specify the name of the admin-syslog.
        pn_scope: "fabric"                              # Specify the name of the scope. local/fabric
        pn_host: "166.68.224.45"                        # Specify host ip.
        pn_message_format: 'structured'                 # structured/legacy
      register: output
    - debug:
        var: output


# This task is to create/modify role.
# It uses pn_role.py module from library/ directory.
- name: role configuration
  hosts: spine[0]
  tags: role

  tasks:
    - name: role functionality
      pn_role:
        pn_cliswitch: "{{ inventory_hostname }}"      # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                           # Specify the action of role. choices=['create', 'modify', 'delete']
        pn_name: "enss"                               # Specify the name of the role.
        pn_scope: "local"                             # Specify the scope of the role. choices=choices=['local', 'fabric']
      register: output
    - debug:
        var: output


# This task is to modify vflow table profile
# It uses pn_vflow_table_profile.py module from the library/ directory
- name: Modify vflow table profile
  hosts: spine[0]
  tags: vflow-table-profile

  tasks:
    - name: Modify vflow table profile
      pn_vflow_table_profile:
        pn_action: 'modify'
        pn_profile: 'ipv6'
        pn_hw_tbl: 'switch-main'
        pn_enable: True
      register: output
    - debug:
        var: output


# This task is to modify igmp snooping
# It uses pn_igmp_snooping.py module from the library/ directory
- name: "Modify IGMP Snooping"
  hosts: all
  tags: igmp-snooping

  tasks:
    - name: "Modify IGMP Snooping"
      pn_igmp_snooping:
        pn_action: 'modify'
        pn_vxlan: True
        pn_enable_vlans: "1-399,401-4092"
        pn_no_snoop_linklocal_vlans: "none"
        pn_igmpv3_vlans: "1-399,401-4092"
      register: output
    - debug:
        var: output


## Configure manually through CLI
## This task is to create/delete/modify cpu class.
## It uses pn_mgmt_cpu_class.py module from library/ directory.
#- name: Modify cpu mgmt class
#  hosts: spine, leaf
#  tags: cpu-mgmt-class
#
#  tasks:
#    - name: Modify cpu mgmt class
#      pn_cpu_mgmt_class: pn_action="modify" pn_name={{ item.name }} pn_rate_limit={{ item.rate_limit }}
#      with_items:
#        - {name: 'snmp', rate_limit: '1000'}
#        - {name: 'fabric', rate_limit: '5000'}
#        - {name: 'bcast', rate_limit: '1000'}
#        - {name: 'nfs', rate_limit: '1000'}
#        - {name: 'web', rate_limit: '1000'}
#        - {name: 'web-ssl', rate_limit: '1000'}
#        - {name: 'net-api', rate_limit: '1000'}
#      register: output
#    - debug:
#        var: output
#
#
## This task is to create/delete/modify cpu class.
## It uses pn_mgmt_cpu_class.py module from library/ directory.
#- name: Modify cpu mgmt class
#  hosts: spine, leaf
#  tags: cpu-mgmt-class
#
#  tasks:
#    - name: Modify cpu mgmt class
#      pn_cpu_mgmt_class: pn_action="modify" pn_name={{ item.name }} pn_rate_limit={{ item.rate_limit }} pn_burst_size=‘15000’
#      with_items:
#        - {name: 'arp', rate_limit: '1000'}
#        - {name: 'icmp', rate_limit: '1000'}
#      register: output
#    - debug:
#        var: output


# This task is to create/delete/modify user.
# It uses pn_user.py module from library/ directory.
- name: "Configure user"
  hosts: spine[0]
  tags: user-create

  tasks:
    - name: "Configure user"
      pn_user:
        pn_action: "create"
        pn_scope: "fabric"
        pn_initial_role: "network-admin"
        pn_password: "{{ ansible_ssh_pass }}"
        pn_name: "enss"
      register: output
    - debug:
        var: output


# This task is for configuring vflow-system.
# It uses the pn_vflow_system.py module.
- name: "Configure vflow-system"
  hosts: spine, leaf
  tags: system-vflow

  tasks:
    - name: "Configure vflow-system"
      pn_vflow_system:
        pn_action: "modify"
        pn_name: "{{ item }}"
        pn_enable: False
      with_items:
        - "System-S"
        - "System-R"
        - "System-F"
      register: output
    - debug:
        var: output



# This task is to create switch routes
# It uses the pn_switch_route.py module
- name: "Configure switch-route"
  hosts: all
  tags: switch-route

  tasks:
    - name: "Configure switch-route"
      pn_switch_route:
        pn_action: "create"
        pn_network: "0.0.0.0/0"
        pn_gateway_ip: "159.67.205.129"
        pn_nic: "vdata0"
        pn_metric: "1"
      register: output
    - debug:
        var: output


# Add in-ban-ipv6 to all the switches
# This task is to create/modify switch configs.
# It uses pn_switch_setup.py module from library/ directory.
- name: Modify in-band network
  hosts: spine[0]
  tags: inband-ipv6

  tasks:
    - name: Modify switch inband ipv6
      pn_switch_setup:
        pn_action: "modify"
        pn_cliswitch: "{{ item.pn_cliswitch }}"
        pn_in_band_ip6: "{{ item.ip }}"
      with_items:
        - {pn_cliswitch: 'tmtrflaan-de60116', ip: '2620:0:1651:107::4/64'}
        - {pn_cliswitch: 'tmtrflaan-de60216', ip: '2620:0:1651:107::5/64'}
        - {pn_cliswitch: 'tmtrflaan-de60316', ip: '2620:0:1651:107::6/64'}
        - {pn_cliswitch: 'tmtrflaan-de60416', ip: '2620:0:1651:107::7/64'}
        - {pn_cliswitch: 'tmtrflaan-we50116', ip: '2620:0:1651:107::8/64'}
        - {pn_cliswitch: 'tmtrflaan-we50216', ip: '2620:0:1651:107::9/64'}
        - {pn_cliswitch: 'tmtrflaan-we50316', ip: '2620:0:1651:107::10/64'}
        - {pn_cliswitch: 'tmtrflaan-we50416', ip: '2620:0:1651:107::11/64'}
      register: output
    - debug:
        var: output


# This task is to create/delete dscp-map.
# It uses pn_dscp_map.py module from library/ directory.
- name: dscp map  module
  hosts: spine, leaf
  tags: dscp-map

  tasks:
    - name: dscp map create
      pn_dscp_map:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "create"                             # admin-syslog configuration command: create/delete.
        pn_name: "verizon_qos"                          # Specify the name of the dscp-map.
      register: output
    - debug:
        var: output


# This task is to modify dscp-map-pri-map.
# It uses pn_dscp_map_pri_map.py module from library/ directory.
- name: dscp map pri map module
  hosts: spine, leaf
  tags: dscp-map-pri-map

  tasks:
    - name: dscp map pri map modify
      pn_dscp_map_pri_map: pn_cliswitch={{ inventory_hostname }} pn_action="modify" pn_name="verizon_qos" pn_pri={{ item.pri }} pn_dsmap={{ item.dsmap }}
      with_items:
        - {pri: '0', dsmap: '40'}
        - {pri: '1', dsmap: '8,10,12,14'}
        - {pri: '2', dsmap: '16,18,20,22'}
        - {pri: '3', dsmap: '24,26,28,30'}
        - {pri: '4', dsmap: '32,34,36,38'}
        - {pri: '5', dsmap: '46'}
        - {pri: '6', dsmap: '48'}
        - {pri: '7', dsmap: '56'}
      register: output
    - debug:
        var: output


# This task is to modify port config.
# It uses pn_port_config.py module from library/ directory.
- name: port config module
  hosts: spine, leaf
  tags: port-config

  tasks:
    - name: port config modify
      pn_port_config:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                             # port config configuration command: modify.
        pn_port: "all"                                  # Specify the port/ports to be modified.
        pn_dscp_map: "verizon_qos"                      # Specify the name of dscp-map.
      register: output
    - debug:
        var: output


# This task is to modify port bandwidth.
# It uses pn_port_cos_bw.py module from library/ directory.
- name: port cos bw module
  hosts: spine, leaf
  tags: port-cos-bw

  tasks:
    - name: port cos bw modify
      pn_port_cos_bw:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                             # port cos bw configuration command: modify.
        pn_port: "all"                                  # Specify the port/ports to be modified.
        pn_cos: "5"                                     # Specify the cos.
        pn_min_bw_guarantee: "20"                       # Specify the min bw guarentee.
      register: output
    - debug:
        var: output


# This task is to modify port bandwidth.
# It uses pn_port_cos_bw.py module from library/ directory.
- name: port cos bw module
  hosts: spine, leaf
  tags: port-cos-bw

  tasks:
    - name: port cos bw modify
      pn_port_cos_bw:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                             # port cos bw configuration command: modify.
        pn_port: "all"                                  # Specify the port/ports to be modified.
        pn_cos: "4"                                     # Specify the cos.
        pn_min_bw_guarantee: "8"                        # Specify the min bw guarentee.
      register: output
    - debug:
        var: output


# This task is to modify port bandwidth.
# It uses pn_port_cos_bw.py module from library/ directory.
- name: port cos bw module
  hosts: spine, leaf
  tags: port-cos-bw

  tasks:
    - name: port cos bw modify
      pn_port_cos_bw:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                             # port cos bw configuration command: modify.
        pn_port: "all"                                  # Specify the port/ports to be modified.
        pn_cos: "6"                                     # Specify the cos.
        pn_min_bw_guarantee: "4"                        # Specify the min bw guarentee.
      register: output
    - debug:
        var: output


# This task is to modify port bandwidth.
# It uses pn_port_cos_bw.py module from library/ directory.
- name: port cos bw module
  hosts: spine, leaf
  tags: port-cos-bw

  tasks:
    - name: port cos bw modify
      pn_port_cos_bw:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                             # port cos bw configuration command: modify.
        pn_port: "all"                                  # Specify the port/ports to be modified.
        pn_cos: "0"                                     # Specify the cos.
        pn_min_bw_guarantee: "60"                       # Specify the min bw guarentee.
      register: output
    - debug:
        var: output


# This task is to modify port bandwidth.
# It uses pn_port_cos_bw.py module from library/ directory.
- name: port cos bw module
  hosts: spine, leaf
  tags: port-cos-bw

  tasks:
    - name: port cos bw modify
      pn_port_cos_bw:
        pn_cliswitch: "{{ inventory_hostname }}"        # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                             # port cos bw configuration command: modify.
        pn_port: "all"                                  # Specify the port/ports to be modified.
        pn_cos: "1"                                     # Specify the cos.
        pn_min_bw_guarantee: "8"                       # Specify the min bw guarentee.
      register: output
    - debug:
        var: output


# This task is to modify port cos rate setting.
# It uses pn_port_cos_rate_setting.py module from library/ directory.
- name: port cos rate setting module
  hosts: spine, leaf
  tags: port-cos-rate-setting

  tasks:
    - name: port cos bw modify
      pn_port_cos_rate_setting:
        pn_cliswitch: "{{ inventory_hostname }}"          # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                               # port cos rate setting configuration command: modify.
        pn_port: "control-port"                           # Specify the port type choices=['control-port', 'data-port', 'span-ports']
        pn_cos1_rate: "1000"                              # Specify the port cos-rate.
        pn_cos5_rate: "1000"                              # Specify the port cos-rate.
        pn_cos2_rate: "1000"                              # Specify the port cos-rate.
        pn_cos0_rate: "1000"                              # Specify the port cos-rate.
        pn_cos6_rate: "1000"                              # Specify the port cos-rate.
        pn_cos3_rate: "1000"                              # Specify the port cos-rate.
        pn_cos4_rate: "1000"                              # Specify the port cos-rate.
        pn_cos7_rate: "1000"                              # Specify the port cos-rate.
      register: output
    - debug:
        var: output


# This task is to enable cpu class.
# It uses pn_system_ettings.py module from library/ directory.
# Enable cpu-class 
- name: Enable cpu class
  hosts: spine, leaf
  tags: system-settings

  tasks:
    - name: Enable cpu class
      pn_system_settings:
        pn_cliswitch: "{{ inventory_hostname }}"       # Name of the switch on which this task is currently getting executed.
        pn_action: "modify"                            # Specify the action. choices=['modify']
        pn_cpu_class_enable: True                      # Specify to enable/disable cpu class.
      register: output
    - debug:
        var: output
    - wait_for_connection:
        delay: 120
        sleep: 20
        timeout: 300

# This task is to create/delete/modify cpu class.
# It uses pn_cpu_class.py module from library/ directory.
# Enable hog-protect and set rate-limit on cpu classes.
- name: Modify cpu class
  hosts: spine,leaf
  tags: cpu-class

  tasks:
    - name: Modify cpu class
      pn_cpu_class:
        pn_action: "modify"
        pn_name: "{{ item.name }}"
        pn_hog_protect: "enable"
        pn_rate_limit: "{{ item.rate }}"
      with_items:
        - {name: 'ospf', rate: '1000'}
        - {name: 'bgp', rate: '1000'}
        - {name: 'lacp', rate: '1000'}
        - {name: 'vrrp', rate: '1000'}
        - {name: 'local-subnet', rate: '1000'}
        - {name: 'stp', rate: '1000'}
        - {name: 'bfd', rate: '1000'}
        - {name: 'arp', rate: '1000'}
      register: output
    - debug:
        var: output
    - pause:
        seconds: 2


# This task is to create/delete/modify cpu class.
# It uses pn_cpu_class.py module from library/ directory.
# Enable hog-protect and set rate-limit on cpu classes.
- name: Modify cpu class
  hosts: spine,leaf
  tags: cpu-class-icmp

  tasks:
    - name: Modify cpu class
      pn_cpu_class:
        pn_action: "create"
        pn_name: "icmp"
        pn_rate_limit: "1000"
        pn_scope: "local"
      register: output
    - debug:
        var: output
    - pause:
        seconds: 2


# This task is for configuring vflows.
# It uses the pn_vflow_system.py module.
- name: Create vflows
  hosts: leaf[0]
  tags: vflow-pn

  tasks:
    - name: create vflow
      pn_vflow:
        pn_action: "create"
        pn_name: "loopback-inband-ping"
        pn_scope: "fabric"
        pn_proto: "icmp"
        pn_burst_size: "auto"
        pn_precedence: "15"
        pn_table_name: "System-L1-L4-Tun-1-0"
        pn_cpu_class: "icmp"
      register: output
    - debug:
        var: output


# This task is for configuring vflows.
# It uses the pn_vflow_system.py module.
- name: Create vflows
  hosts: leaf[0]
  tags: vflow-pn

  tasks:
    - name: create vflow
      pn_vflow:
        pn_action: "create"
        pn_name: "loopback-inband-ssh"
        pn_scope: "fabric"
        pn_dst_port: "22"
        pn_proto: "tcp"
        pn_burst_size: "auto"
        pn_precedence: "15"
        pn_table_name: "System-L1-L4-Tun-1-0"
        pn_cpu_class: "icmp"
      register: output
    - debug:
        var: output


# This task is for configuring vflows.
# It uses the pn_vflow_system.py module.
- name: Create vflows
  hosts: leaf[0]
  tags: vflow-pn

  tasks:
    - name: create vflow
      pn_vflow:
        pn_action: "create"
        pn_name: "loopback-inband-snmp"
        pn_scope: "fabric"
        pn_dst_port: "161"
        pn_proto: "udp"
        pn_burst_size: "auto"
        pn_precedence: "15"
        pn_table_name: "System-L1-L4-Tun-1-0"
        pn_cpu_class: "icmp"
      register: output
    - debug:
        var: output


# This task is for configuring vflows.
# It uses the pn_vflow_system.py module.
- name: Create vflows
  hosts: leaf[0]
  tags: vflow-pn

  tasks:
    - name: create vflow
      pn_vflow:
        pn_action: "create"
        pn_name: "loopback-inband-ping6"
        pn_scope: "fabric"
        pn_src_port: "36864"
        pn_src_port_mask: "0xef00"
        pn_proto: "icmpv6"
        pn_burst_size: "auto"
        pn_precedence: "15"
        pn_table_name: "System-L1-L4-Tun-1-0"
        pn_cpu_class: "icmpv6"
      register: output
    - debug:
        var: output


## Verizon TACACS
## This task is to create/delete/modify aaa-tacacs.
## It uses pn_aaa_tacacs.py module from library/ directory.
#- name: aaa tacacs module
#  hosts: spine[0]
#  tags: aaa-tacacs
#
#  tasks:
#    - name: aaa-tacacs functionality
#      pn_aaa_tacacs:
#        pn_action: "create"                             #aaa tacacs configuration command: create/delete/modify.
#        pn_scope: "fabric"                               # local/fabric
#        pn_name: "vz-tacacs1"
#        pn_server: "138.83.66.217"
#        pn_port: "49"
#        pn_secret: "{{ tacacs_pass }}"
#        pn_priority: "1"
#        pn_authen_method: "pap"                              # pap/chap/ms-chap
#        pn_service: "pluribus-shell"
#        #pn_service_shell:
#        #pn_service_vtysh:
#        pn_authen: True
#        pn_authen_local: True
#        pn_acct_local: True
#        pn_sess_acct: True
#        pn_cmd_acct: True
#        pn_cmd_author: True
#        pn_sess_author: True
#        pn_author_local: True
#      register: output
#    - debug:
#        var: output
#
#
## This task is to create/delete/modify aaa-tacacs.
## It uses pn_aaa_tacacs.py module from library/ directory.
#- name: aaa tacacs module
#  hosts: spine[0]
#
#  tasks:
#    - name: aaa-tacacs functionality
#      pn_aaa_tacacs:
#        pn_action: "create"                             #aaa tacacs configuration command: create/delete/modify.
#        pn_scope: "fabric"                               # local/fabric
#        pn_name: "vz-tacacs2"
#        pn_server: "137.188.75.11"
#        pn_port: "49"
#        pn_secret: "{{ tacacs_pass }}"
#        pn_priority: "2"
#        pn_authen_method: "pap"                              # pap/chap/ms-chap
#        pn_service: "pluribus-shell"
#        #pn_service_shell:
#        #pn_service_vtysh:
#        pn_authen: True
#        pn_authen_local: True
#        pn_acct_local: True
#        pn_sess_acct: True
#        pn_cmd_acct: True
#        pn_cmd_author: True
#        pn_sess_author: True
#        pn_author_local: True
#      register: output
#    - debug:
#        var: output
#
#
## This task is to create/delete/modify aaa-tacacs.
## It uses pn_aaa_tacacs.py module from library/ directory.
#- name: aaa tacacs module
#  hosts: spine[0]
#
#  tasks:
#    - name: aaa-tacacs functionality
#      pn_aaa_tacacs:
#        pn_action: "create"                             #aaa tacacs configuration command: create/delete/modify.
#        pn_scope: "fabric"                               # local/fabric
#        pn_name: "vz-tacacs3"
#        pn_server: "162.115.11.11"
#        pn_port: "49"
#        pn_secret: "{{ tacacs_pass }}"
#        pn_priority: "3"
#        pn_authen_method: "pap"                              # pap/chap/ms-chap
#        pn_service: "pluribus-shell"
#        #pn_service_shell:
#        #pn_service_vtysh:
#        pn_authen: True
#        pn_authen_local: True
#        pn_acct_local: True
#        pn_sess_acct: True
#        pn_cmd_acct: True
#        pn_cmd_author: True
#        pn_sess_author: True
#        pn_author_local: True
#      register: output
#    - debug:
#        var: output

