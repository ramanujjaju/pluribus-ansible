#L3 VRRP OSPF
---


# This task is to accept eula.
# It uses pn_eula_accept.py module from library/ directory.
# pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
- name: Zero Touch Provisioning - Eula accept
  hosts: localhost

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Auto accept EULA
      pn_ztp_eula_accept:
        pn_cliusername: "{{ USERNAME }}"               # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"               # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] | default([]) }}"            # List of all switches
        pn_leaf_list: "{{ groups['leaf'] | default([])}}"            # List of all switches
        pn_leaf_ips: "{{ groups['leaf'] | default('') | map('extract', hostvars, ['ansible_host']) | join(',') }}"   # IPs of all switches separated by comma
        pn_spine_ips: "{{ groups['spine'] | default('') | map('extract', hostvars, ['ansible_host']) | join(',') }}"


# This task is to configure initial ZTP setup on all switches.
# It uses pn_initial_ztp.py module from library/ directory.
# pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
# If the tasks fails then it will retry as specified by retries count.
- name: Zero Touch Provisioning - Initial setup
  hosts: all
  serial: 1

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Auto accept EULA, Disable STP, enable ports and create/join fabric
      pn_ztp_initial_setup:
        pn_cliusername: "{{ USERNAME }}"               # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"               # Cli password (value comes from cli_vault.yml).
        pn_fabric_name: 'ansible-ospf-pim-fabric'      # Name of the fabric to create/join.
        pn_current_switch: "{{ inventory_hostname }}"  # Name of the switch on which this task is currently getting executed.
        pn_spine_list: "{{ groups['spine'] }}"         # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"           # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_toggle_40g: True                            # Flag to indicate if 40g ports should be converted to 10g ports or not.
        pn_inband_ip: '172.16.1.0/24'                  # Inband ips to be assigned to switches starting with this value. Default: 172.16.0.0/24.
        pn_fabric_network: 'mgmt'                      # Choices: in-band or mgmt.  Default: mgmt
        pn_fabric_control_network: 'mgmt'              # Choices: in-band or mgmt.  Default: mgmt
        pn_static_setup: False                         # Flag to indicate if static values should be assign to following switch setup params. Default: True.
        pn_mgmt_ip: "{{ ansible_host }}"               # Specify MGMT-IP value to be assign if pn_static_setup is True.
        pn_mgmt_ip_subnet: '16'                        # Specify subnet mask for MGMT-IP value to be assign if pn_static_setup is True.
        pn_gateway_ip: '10.9.9.1'                      # Specify GATEWAY-IP value to be assign if pn_static_setup is True.
        pn_dns_ip: '10.20.41.1'                        # Specify DNS-IP value to be assign if pn_static_setup is True.
        pn_dns_secondary_ip: '10.20.4.1'               # Specify DNS-SECONDARY-IP value to be assign if pn_static_setup is True.
        pn_domain_name: 'pluribusnetworks.com'         # Specify DOMAIN-NAME value to be assign if pn_static_setup is True.
        pn_ntp_server: '0.us.pool.ntp.org'             # Specify NTP-SERVER value to be assign if pn_static_setup is True.
        pn_web_api: True                               # Flag to enable web api. Default: True
        pn_stp: False                                  # Specify True if you want to enable STP at the end. Default: False.
      register: ztp_out                                # Variable to hold/register output of the above tasks.
      until: ztp_out.failed != true                    # If the above code fails it will retry the code
      retries: 3                                       # This is the retries count
      delay: 3
      ignore_errors: yes                               # Flag to indicate if we should ignore errors if any.

    - pause:
        seconds: 2                                     # Pause playbook execution for specified amount of time.


- name: Configure L3 VRRP with OSPF
  hosts: spine[0]

  vars_files:
  - cli_vault.yml

  vars:
  - csv_file: /etc/ansible/vrrp.csv

  tasks:
    # This task is to configure VRRP for Layer 3 fabric.
    # It takes required VRRP config data from csv file.
    # It uses pn_l3_vrrp.py module from library/ directory.
    # pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
    - name: Configure L3 vrrp
      pn_ztp_l3_vrrp:
        pn_cliusername: "{{ USERNAME }}"        # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"        # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"  # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"    # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_csv_data: "{{ lookup('file', '{{ csv_file }}') }}"  # Csv file containing L3 vrrp data.
        pn_pim_ssm: True                 	# Variable to specify pim_ssm for ospf
        pn_ospf_redistribute: 'connected'       # Variable to configure ospf redistribute
      register: vrrp_out                        # Variable to hold/register output of the above tasks.
      until:  vrrp_out.failed != true           # If error pops up it will retry the code
      retries: 3                                # This is the retries count
      delay: 1

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.


    # This task is to configure ZTP for layer3 fabric.
    # It uses pn_l3_ztp.py module from library/ directory.
    # pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
    # If the tasks fails then it will retry as specified by retries count.
    - name: Auto configure link IPs
      pn_ztp_l3_links:
        pn_cliusername: "{{ USERNAME }}"                # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"                # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"          # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"            # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_net_address: "172.168.1.0"          		# Network address required to calculate link IPs for layer3 fabric.
        pn_cidr: "24"                        		# Subnet mask required to calculate link IPs for layer3 fabric.
        pn_supernet: "30"                		# Supernet mask required to calculate link IPs for layer3 fabric.
        pn_loopback_ip: "109.109.109.0/24"          	# Loopback ip starting value for vrouters. Default: 109.109.109.0/24.
        pn_bfd: True                          		# Flag to indicate if BFD config should be added to vrouter interfaces. Default: False.
        pn_bfd_min_rx: 200           			# BFD-MIN-RX value required for adding BFD configuration to vrouter interfaces.
        pn_bfd_multiplier: 3    			# BFD_MULTIPLIER value required for adding BFD configuration to vrouter interfaces.
        pn_update_fabric_to_inband: False  		# Flag to indicate if fabric network should be updated to in-band. Default: False.
        pn_stp: True                          		# Flag to enable STP (spanning tree protocol). Default: False.
      register: ztp_l3_out                              # Variable to hold/register output of the above tasks.
      until:  ztp_l3_out.failed != true                 # If error pops up it will retry the code
      retries: 3                                        # This is the retries count
      delay: 1

    - pause:
        seconds: 2                                      # Pause playbook execution for specified amount of time.

    # This task is to configure OSPF.
    # It uses pn_ebgp_ospf.py module from library/ directory.
    # pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
    - name: Configure OSPF
      pn_ztp_bgp_ospf:
        pn_cliusername: "{{ USERNAME }}"                   # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"                   # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"             # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"               # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_bfd: True                             	   # Indicate if BFD config should be added to eBGP. Default: False.
        pn_routing_protocol: 'ospf'                        # Routing protocol to configure. Choices are ['ebgp', 'ospf']
        pn_ospf_area_id: "0"           			   # Area id to configure for ospf. Default: 0
        pn_iospf_ip_range: "75.75.75.0/24"       	   # Ip range for creating the interfaces between leaf clusters. Default:'75.75.75.0/24'
        pn_iospf_vlan: "4040"                  		   # Vlan for creating the interfaces between leaf clusters. Default:'4040'
        pn_ospf_redistribute: "connected"                  # Variable to configure ospf redistribute 
        pn_pim_ssm: True                       		   # pim-ssm variable for configuration
        pn_area_configure_flag: "singlearea"               # Varible to configure area choices=['singlearea', 'dualarea', 'multiarea'], default='singlearea'
      register: ospf_out                                   # Variable to hold/register output of the above tasks.
      until: ospf_out.failed != true                       # If the above code fails it will retry the code
      retries: 3                                           # This is the retries count
      delay: 1

    - pause:
        seconds: 2                                         # Pause playbook execution for specified amount of time.
